using ServerStatusBot.Definitions.Database.Models;
using System.Windows.Input;
using Microsoft.Toolkit.Mvvm.Input;
using YouTubeHelper.Models;
using ServerStatusBot.Definitions.Api;
using System.Threading.Tasks;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Windows;
using YouTubeHelper.Utilities;
using Microsoft.Web.WebView2.Core;
using Microsoft.Web.WebView2.Wpf;

namespace YouTubeHelper.ViewModels
{
    public class SettingsViewModel
    {
        public SettingsViewModel()
        {

        }

        // For binding
        public Settings Settings => Settings.Instance!;

        public ICommand ChangeServerAddressCommand => _changeServerAddressCommand ??= new RelayCommand(async () =>
        {
            ApplicationSettings.Instance.ServerAddress = null;
            await MainWindow.ConnectToServer();

            // After reconnecting, re-hook up SignalR
            Exception? finalEx = null;

            for (int i = 0; i < 10; ++i)
            {
                if (!string.IsNullOrEmpty(ServerApiClient.BaseUrl))
                {
                    try
                    {
                        await ServerApiClient.Instance.ReconnectAllGroups();
                        break;
                    }
                    catch (Exception ex)
                    {
                        finalEx = ex;
                    }

                    await Task.Delay(TimeSpan.FromSeconds(1));
                }
                else
                {
                    break;
                }
            }

            if (finalEx != null)
            {
                Application.Current?.Dispatcher.Invoke(async () => await MessageBoxHelper.ShowCopyableText(Properties.Resources.UnexpectedError, Properties.Resources.Error, finalEx.ToString()));
            }
        });
        private ICommand? _changeServerAddressCommand;

        public ICommand UploadCookiesCommand => _uploadCookiesCommand ??= new RelayCommand(() =>
        {
            WebView2 webView = new WebView2();

            // Create Window and add the WebView2
            _loginWindow = new Window
            {
                Title = "YouTube Login",
                Width = 800,
                Height = 600,
                Content = webView
            };

            _loginWindow.Loaded += async (_, _) =>
            {
                string userDataFolder = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "YTH");
                CoreWebView2Environment? coreWebView2Environment = await CoreWebView2Environment.CreateAsync(null, userDataFolder);
                await webView.EnsureCoreWebView2Async(coreWebView2Environment);
                
                webView.CoreWebView2.Navigate("https://accounts.google.com/ServiceLogin?service=youtube");
                webView.CoreWebView2.NavigationCompleted += HandleWebViewNavigation;
            };

            _loginWindow.ShowDialog();
        });
        private ICommand? _uploadCookiesCommand;
        private Window? _loginWindow;

        private async void HandleWebViewNavigation(object? sender, CoreWebView2NavigationCompletedEventArgs args)
        {
            if (sender is CoreWebView2 webView)
            {
                string? url = webView.Source;
                if (url != null && url.Contains("youtube.com"))
                {
                    webView.NavigationCompleted -= HandleWebViewNavigation;

                    List<CoreWebView2Cookie> cookies = await webView.CookieManager.GetCookiesAsync("https://youtube.com");
                    long expires = DateTimeOffset.UtcNow.AddYears(5).ToUnixTimeSeconds();

                    StringBuilder sb = new();
                    sb.AppendLine("# Netscape HTTP Cookie File");
                    sb.AppendLine("# Generated by WebView2");

                    foreach (CoreWebView2Cookie cookie in cookies)
                    {
                        string domain = cookie.Domain.StartsWith(".") ? cookie.Domain : "." + cookie.Domain;
                        sb.AppendLine($"{domain}\tTRUE\t{cookie.Path}\tFALSE\t{expires}\t{cookie.Name}\t{cookie.Value}");
                    }

                    string filePath = Path.Combine(Path.GetTempPath(), "cookies.txt");
                    await File.WriteAllTextAsync(filePath, sb.ToString());

                    string result = await ServerApiClient.Instance.UploadCookiesFile(filePath);

                    File.Delete(filePath);

                    _loginWindow?.Close();

                    await MessageBoxHelper.Show(result, "Upload Result", MessageBoxButton.OK);
                }
            }
        }
    }
}
